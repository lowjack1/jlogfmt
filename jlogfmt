#!/bin/bash

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;37m'
DIM_GRAY='\033[2;37m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Default values
FOLLOW=false
HOURS=1
ERRORS_ONLY=false
SERVICE_NAME=""

# Function to show help
show_help() {
    echo -e "${BOLD}jlogfmt - JSON Log Formatter${NC}"
    echo -e "${BOLD}Usage:${NC}"
    echo -e "  $0 [options]\n"
    echo -e "${BOLD}Options:${NC}"
    echo -e "  -f, --follow         Follow logs in real-time"
    echo -e "  -h, --hours N        Show logs from last N hours (default: 1)"
    echo -e "  -d, --date DATE      Show logs from specific date (YYYY-MM-DD)"
    echo -e "  -e, --errors         Show only errors and warnings"
    echo -e "  -s, --service NAME   Service name (required)"
    echo -e "  --help               Show this help\n"
    echo -e "${BOLD}Examples:${NC}"
    echo -e "  $0 -s nginx -f                     # Follow logs in real-time"
    echo -e "  $0 -s myservice -h 2               # Show last 2 hours"
    echo -e "  $0 -s nginx -e -f                  # Follow only errors and warnings"
    echo -e "  $0 -s myservice -d 2025-01-20      # Show logs from specific date"
}

# Function to format and colorize logs
format_logs() {
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    python3 "$SCRIPT_DIR/jlogfmt_core.py"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--follow)
            FOLLOW=true
            shift
            ;;
        -h|--hours)
            HOURS="$2"
            shift 2
            ;;
        -d|--date)
            DATE_FILTER="$2"
            shift 2
            ;;
        -e|--errors)
            ERRORS_ONLY=true
            shift
            ;;
        -s|--service)
            SERVICE_NAME="$2"
            shift 2
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Check if service name is provided
if [ -z "$SERVICE_NAME" ]; then
    echo -e "${RED}Error: Service name is required${NC}"
    echo "Use -s or --service to specify the service name"
    echo "Use --help for more information"
    exit 1
fi

# Build journalctl command
JOURNAL_CMD="journalctl -u $SERVICE_NAME --no-pager"

if [ "$FOLLOW" = true ]; then
    JOURNAL_CMD="$JOURNAL_CMD -f"
elif [ -n "$DATE_FILTER" ]; then
    JOURNAL_CMD="$JOURNAL_CMD --since '$DATE_FILTER 00:00:00' --until '$DATE_FILTER 23:59:59'"
else
    JOURNAL_CMD="$JOURNAL_CMD --since '${HOURS} hours ago'"
fi

echo -e "${BOLD}${BLUE}jlogfmt - JSON Log Formatter${NC} ${DIM_GRAY}${NC}"
echo -e "${GRAY}Service: $SERVICE_NAME${NC}"
if [ "$FOLLOW" = true ]; then
    echo -e "${GRAY}Mode: Following logs in real-time (Ctrl+C to exit)${NC}"
elif [ -n "$DATE_FILTER" ]; then
    echo -e "${GRAY}Showing logs from: $DATE_FILTER${NC}"
else
    echo -e "${GRAY}Showing logs from: last $HOURS hour(s)${NC}"
fi
echo ""

# Execute and format
if [ "$ERRORS_ONLY" = true ]; then
    eval $JOURNAL_CMD | grep -E "(ERROR|WARNING)" | format_logs
else
    eval $JOURNAL_CMD | format_logs
fi 